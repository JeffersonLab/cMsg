package org.jlab.coda.cMsg.remoteExec;

/**
 * @author timmer
 * Date: Oct 14, 2010
 */
public class CommandReturn {

    /** Id number generated by Commander. */
    private final int id;

    /** Associated id number generated by Executor. */
    private final int executorId;

    /** Output (if any) of the started process, or any error output. */
    private final String output;

    /** Was there an error in running the process/thread? */
    private boolean error;

    /** Has the process already terminated? */
    private boolean terminated;

    /** Callback object. Sorry, only one allowed. */
    private ProcessCallback processCallback;

    /** Object to pass to callback as argument. */
    private Object userObject;


    /**
     * Constructor.
     * @param id id number generated by Commander.
     * @param processId associated id number generated by Executor.
     * @param error was there an error running the process/thread?
     * @param terminated has process terminated already?
     * @param output output (if any) of the started process, or any error output.
     */
    public CommandReturn(int id, int processId,
                         boolean error, boolean terminated, String output) {
        this.id = id;
        this.executorId = processId;
        this.error = error;
        this.terminated = terminated;
        this.output = output;
    }

    /**
     * Register a callback to be run when the process ends.
     * Calling this multiple times results in a replacement of the callback.
     * 
     * @param processCallback callback to be run when the process ends.
     * @param userObject argument to be passed to callback.
     */
    public void registerCallback(ProcessCallback processCallback, Object userObject) {
        this.userObject = userObject;
        this.processCallback = processCallback;
    }

    /**
     * Run the registered callback.
     */
    public void executeCallback() {
        if (processCallback == null) return;
        processCallback.callback(userObject);
    }

    /**
     * Get the Executor generated id number.
     * @return the Executor generated id number.
     */
    int getExecutorId() {
        return executorId;
    }

    /**
     * Get the Commander generated id number.
     * @return the Commander generated id number.
     */
    public int getId() {
        return id;
    }

    /**
     * Get whether error occurred in the attempt to run the process or thread.
     * @return <code>true</code> if error occurred attempting to run process/thread,
     *         else <code>false</code>.
     */
    public boolean hasError() {
        return error;
    }

    /**
     * Set whether the process has already terminated.
     * @param b <code>true</code> if process has terminated, else <code>false</code>.
     */
    void hasTerminated(boolean b) {
        terminated = b;
    }

    /**
     * Get whether the process has already terminated.
     * @return <code>true</code> if process has already terminated, else <code>false</code>.
     */
    public boolean hasTerminated() {
        return terminated;
    }

    /**
     * Get whether the process has any output.
     * @return <code>true</code> if the process has output, else <code>false</code>.
     */
    public boolean hasOutput() {
        return output != null;
    }

    /**
     * Get the output generated by the started process, or any error output
     * by the process or thread.
     * @return output generated by the started process, any error output
     *         by the process or thread, or null if no output from process
     */
    public String getOutput() {
        return output;
    }

    public String toString() {
        return "Id = " + id + ", execId = " + executorId + ", error = " +
                error + ", term = " + terminated + ", output = " + (output != null);
    }

}
