package org.jlab.coda.cMsg.remoteExec;

/**
 * @author timmer
 * Date: Oct 14, 2010
 */
public class CommandReturn {

    /** Id number generated by Commander. */
    private final int id;

    /** Associated id number generated by Executor. */
    private final int executorId;

    /** Output (if any) of the started process, or any error output. */
    private final String output;

    /** Was there an error in running the process/thread? */
    private boolean error;

    /** Has the process already terminated? */
    private boolean terminated;


    /**
     * Constructor.
     * @param id id number generated by Commander.
     * @param processId associated id number generated by Executor.
     * @param error was there an error running the process/thread?
     * @param terminated has process terminated already?
     * @param output output (if any) of the started process, or any error output.
     */
    public CommandReturn(int id, int processId,
                         boolean error, boolean terminated, String output) {
        this.id = id;
        this.executorId = processId;
        this.error = error;
        this.terminated = terminated;
        this.output = output;
    }

    /**
     * Get the Executor generated id number.
     * @return the Executor generated id number.
     */
    int getExecutorId() {
        return executorId;
    }

    /**
     * Get the Commander generated id number.
     * @return the Commander generated id number.
     */
    public int getId() {
        return id;
    }

    /**
     * Get whether error occurred in the attempt to run the process or thread.
     * @return <code>true</code> if error occurred attempting to run process/thread,
     *         else <code>false</code>.
     */
    public boolean hasError() {
        return error;
    }

    /**
     * Get whether the process has already terminated.
     * @return <code>true</code> if process has already terminated,
     *         else <code>false</code>.
     */
    public boolean hasTerminated() {
        return terminated;
    }

    /**
     * Get the output generated by the started process, or any error output
     * by the process or thread.
     * @return output generated by the started process, or any error output
     *         by the process or thread.
     */
    public String getOutput() {
        return output;
    }

}
