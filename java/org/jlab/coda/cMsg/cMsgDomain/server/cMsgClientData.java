/*----------------------------------------------------------------------------*
 *  Copyright (c) 2008        Jefferson Science Associates,                   *
 *                            Thomas Jefferson National Accelerator Facility  *
 *                                                                            *
 *    This software was developed under a United States Government license    *
 *    described in the NOTICE file included as part of this distribution.     *
 *                                                                            *
 *    C. Timmer, 7-May-2008, Jefferson Lab                                    *
 *                                                                            *
 *     Author: Carl Timmer                                                    *
 *             timmer@jlab.org                   Jefferson Lab, MS-12B3       *
 *             Phone: (757) 269-5130             12000 Jefferson Ave.         *
 *             Fax:   (757) 269-6248             Newport News, VA 23606       *
 *                                                                            *
 *----------------------------------------------------------------------------*/

package org.jlab.coda.cMsg.cMsgDomain.server;

import org.jlab.coda.cMsg.common.cMsgClientInfo;
import org.jlab.coda.cMsg.common.cMsgSubdomainInterface;

import java.nio.channels.SocketChannel;
import java.nio.ByteBuffer;
import java.net.DatagramSocket;
import java.util.concurrent.atomic.AtomicBoolean;

/**
 * Need to store a little extra info not covered in the super class.
 */
class cMsgClientData extends cMsgClientInfo {

    /** For server clients, the password clients must use to connect to that server. */
    String clientPassword;

    /** Socket to receive UDP sends from the client. */
    DatagramSocket udpSocket;
    
    /** Socket channel used by this server to get monitor data from client and
     * to send monitor data to client (dual functions as keepAlive). */
    SocketChannel keepAliveChannel;

    /** Reference to subdomain handler object. */
    cMsgSubdomainInterface subdomainHandler;

    /** Reference to cMsg subdomain handler object if appropriate. */
    org.jlab.coda.cMsg.cMsgDomain.subdomains.cMsg cMsgSubdomainHandler;

    /**
     * Keep track of whether the handleShutdown method of the subdomain
     * handler object has already been called.
     */
    AtomicBoolean calledSubdomainShutdown = new AtomicBoolean();

    /** Is this client in the cMsg domain? */
    boolean inCmsgSubdomain;

    /** Internal bookkeeping. */
    boolean readingSize = true;
    
    /**
     * Size of data in bytes (not including int representing size which
     * is the first data sent).
     */
    int size;
    int bytesRead;

    /** Unique key sent by cMsgNameServer to client as an ID. */
    int clientKey;
    
    /** Direct buffer for reading TCP nonblocking IO. */
    ByteBuffer buffer = ByteBuffer.allocateDirect(16384);




    /** Convenience class to store all monitoring quantities. */
    static class monitorData {
        // Quantities measured by the domain server
        long birthday;
        long tcpSends, udpSends, syncSends, sendAndGets,
                subAndGets, subscribes, unsubscribes;
        // Quantities obtained from the client
        long clientTcpSends, clientUdpSends, clientSyncSends, clientSendAndGets,
                clientSubAndGets, clientSubscribes, clientUnsubscribes;
        boolean isJava;
        int pendingSendAndGets;
        int pendingSubAndGets;
        String monXML;
    }

    monitorData monData = new monitorData();

    long updateTime;


    /**
     * Gets server client's client-connect password.
     * @return server client's client-connect password
     */
    public String getPassword() {return clientPassword;}



    /**
     * Constructor specifing client's name, port, host, subdomain, and UDL remainder.
     * Used in nameServer for a connecting regular client.
     *
     * @param name  client's name
     * @param nsPort name server's listening port
     * @param port  client's listening port
     * @param host  client's host
     * @param dotDec  client's address in dotted decimal form
     * @param subdomain    client's subdomain
     * @param UDLRemainder client's UDL's remainder
     * @param UDL          client's UDL
     * @param description  client's description
     * @param uniqueKey    client's unique key (generated by nameserver)
     */
    public cMsgClientData(String name, int nsPort, int port, String host,
                          String dotDec, String subdomain,                          
                          String UDLRemainder, String UDL, String description,
                          int uniqueKey) {
        super(name, nsPort, port, host, dotDec, subdomain, UDLRemainder, UDL, description);
        this.clientKey = uniqueKey;
    }

    /**
     * Constructor used when cMsg server acts as a client and connects a to cMsg server.
     * Used in nameServer for a connecting server client.
     *
     * @param name  server client's name
     * @param nsPort name server's TCP listening port
     * @param mPort name server's UDP multicast listening port
     * @param host  server client's host
     * @param password  server client's password that its clients use to connect
     * @param uniqueKey    client's unique key (generated by nameserver)
     */
    public cMsgClientData(String name, int nsPort, int mPort,
                          String host, String password, int uniqueKey) {
        super(name, nsPort, mPort, host);
        this.clientPassword = password;
        this.clientKey = uniqueKey;
    }
}
