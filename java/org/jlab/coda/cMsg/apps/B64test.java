/*----------------------------------------------------------------------------*
 *  Copyright (c) 2004        Southeastern Universities Research Association, *
 *                            Thomas Jefferson National Accelerator Facility  *
 *                                                                            *
 *    This software was developed under a United States Government license    *
 *    described in the NOTICE file included as part of this distribution.     *
 *                                                                            *
 *    C. Timmer, Aug-14-2007, Jefferson Lab                                   *
 *                                                                            *
 *     Author: Carl Timmer                                                    *
 *             timmer@jlab.org                   Jefferson Lab, MS-6B         *
 *             Phone: (757) 269-5130             12000 Jefferson Ave.         *
 *             Fax:   (757) 269-5800             Newport News, VA 23606       *
 *                                                                            *
 *----------------------------------------------------------------------------*/

package org.jlab.coda.cMsg.apps;

import org.jlab.coda.cMsg.Base64;
import java.io.UnsupportedEncodingException;


/**
 * An example class which creates test base64 endcoding and decoding.
 */
public class B64test {

    String  name = "consumer";
    String  description = "java consumer";
    String  subject = "SUBJECT";
    String  type = "TYPE";
    boolean debug;
    long    count;

    // string generated by C base64 encoder
    String shorts100  = "AAABAAIAAwAEAAUABgAHAAgACQAKAAsADAANAA4ADwAQABEAEgATABQAFQAWABcAGAAZABoAGwAc" +
                        "AB0AHgAfACAAIQAiACMAJAAlACYAJwAoACkAKgArACwALQAuAC8AMAAxADIAMwA0ADUANgA3ADgA" +
                        "OQA6ADsAPAA9AD4APwBAAEEAQgBDAEQARQBGAEcASABJAEoASwBMAE0ATgBPAFAAUQBSAFMAVABV" +
                        "AFYAVwBYAFkAWgBbAFwAXQBeAF8AYABhAGIAYwA=";

    /** Constructor. */
    B64test(String[] args) {
    }

    /**
     * Converts 4 bytes of a byte array into an integer.
     *
     * @param b   byte array
     * @param off offset into the byte array (0 = start at first element)
     * @return integer value
     */
    private static final int bytesToInt(byte[] b, int off) {
        return (((b[off] & 0xff) << 24)     |
                ((b[off + 1] & 0xff) << 16) |
                ((b[off + 2] & 0xff) << 8)  |
                 (b[off + 3] & 0xff));
    }

    /**
     * Copies an integer value into 4 bytes of a byte array.
     * @param intVal integer value
     * @param b byte array
     * @param off offset into the byte array
     */
    public static final void intToBytes(int intVal, byte[] b, int off) {
      b[off]   = (byte) ((intVal & 0xff000000) >>> 24);
      b[off+1] = (byte) ((intVal & 0x00ff0000) >>> 16);
      b[off+2] = (byte) ((intVal & 0x0000ff00) >>>  8);
      b[off+3] = (byte)  (intVal & 0x000000ff);
    }

    /**
     * Converts 2 bytes of a byte array into a short.
     *
     * @param b   byte array
     * @param off offset into the byte array (0 = start at first element)
     * @return integer value
     */
    private static final short bytesToShort(byte[] b, int off) {
        return  (short) ( ((b[off+1] & 0xff) << 8)  | (b[off] & 0xff) );
    }

    /**
     * Copies a short value into 2 bytes of a byte array.
     * @param val short value
     * @param b byte array
     * @param off offset into the byte array
     */
    public static final void shortToBytes(short val, byte[] b, int off) {
      b[off]   = (byte) ((val & 0x0000ff00) >>>  8);
      b[off+1] = (byte)  (val & 0x000000ff);
    }



    /**
     * Run as a stand-alone application.
     */
    public static void main(String[] args) {
            B64test consumer = new B64test(args);
            consumer.run();
    }



    /**
     * This method is executed as a thread.
     */
    public void run() {


        System.out.println("Running B64 test");
/*
        short[] st = new short[100];
        int off = 0;
        try {
            System.out.println("Num of chars in string = " + shorts100.getBytes("US-ASCII").length);
            byte[] dec = Base64.decodeToBytes(shorts100);
            for (int i=0; i<100 ; i++) {
                System.out.println("s[" + i + "] = " + Integer.toHexString(bytesToShort(dec, off)) );
                off += 2;
            }
        }
        catch (UnsupportedEncodingException e) { }
*/

        System.out.println("Running cast test");
        int i = -1;
        long l1, l2;
        l1 = i;
        l2 = (long)i;

        System.out.println("Int = " + i + ", long by assignment = " + l1);
        System.out.println("Int = " + i + ", long by cast = " + l2);

    }
}
