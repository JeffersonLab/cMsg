#
# cMsg unix makefile for C code
#

AR     = ar
RANLIB = ranlib

LIBNAM      = libcmsg
LIB_STATIC  = $(LIBNAM).a
LIB_DYNAMIC = $(LIBNAM).so

# for all POSIX systems _REENTRANT makes libc functions reentrant
AC_FLAGS = -D_REENTRANT -D_POSIX_PTHREAD_SEMANTICS

# Linux
ifeq ($(OSNAME),Linux)
CC = gcc
CFLAGS   = -g -fPIC -I. -I$(INC_DIR) $(AC_FLAGS)
#CFLAGS   = -O3 -fPIC -I. -I$(INC_DIR) $(AC_FLAGS)
LIBS     = -lieee -lrt -lpthread -lm -lnsl -lresolv -ldl
SHLIB_LD = gcc -shared

# if 32 bit
ifneq ($(CMSG_BIT_ARCH), 64)
CFLAGS   = -g -m32 -fpic -I. -I$(INC_DIR) $(AC_FLAGS)
#CFLAGS   = -m32 -O3 -fpic -I. -I$(INC_DIR) $(AC_FLAGS)
#SHLIB_LD = ld -m elf_i386 -shared
SHLIB_LD = gcc -m32 -shared
endif

endif

# Solaris
ifeq ($(OSNAME),SunOS)

CC   = cc
LIBS = -lm -lposix4 -lpthread -lsocket -lnsl -lresolv -ldl

# if 64 bit
ifeq ($(CMSG_BIT_ARCH), 64)

# no static linking on 64 bit solaris
LIB_STATIC =

# if SPARC processor
ifeq ($(PLATFORM), sun4u)
CFLAGS   = -mt -xO5 -xarch=native64 -xcode=pic32 -I. -I$(INC_DIR) $(AC_FLAGS)
SHLIB_LD = ld -G -L /lib/64
# else if AMD processor
else
# put -fast flag to left of -xarch=amd64 !!!
CFLAGS   = -mt -xO5 -xarch=amd64 -xcode=pic32 -I. -I$(INC_DIR) $(AC_FLAGS)
# for some reason we must handle ucb lib explicitly
SHLIB_LD = ld -G -L /lib/64 -L /usr/ucblib/amd64
endif

# else if 32 bit
else
CFLAGS   = -mt -xO5 -KPIC -I. -I$(INC_DIR) $(AC_FLAGS)
SHLIB_LD = ld -G
endif

endif

CMSG_LIBS = $(LIB_DYNAMIC) $(LIB_STATIC)

SRC =   sunConcurrency.c \
	rwlock.c \
	cMsgMatching.c \
	cMsgNetwork.c \
	cMsg.c \
	fileDomain.c \
	cMsgDomainUtil.c \
	cMsgDomainListenThread.c \
	cMsgDomain.c \
	rcDomain.c

OBJS =  sunConcurrency.o \
	rwlock.o \
	cMsgMatching.o \
	cMsgNetwork.o \
	cMsg.o \
	fileDomain.o \
	cMsgDomainUtil.o \
	cMsgDomainListenThread.o \
	cMsgDomain.o \
	rcDomain.o

HFILES = rwlock.h cMsgNetwork.h cMsgPrivate.h cMsgConstants.h cMsg.h cMsgDomain.h rcDomain.h

PROGS  = producer consumer getConsumer getResponder shutdowner rcClient monitor


all: copyFiles $(CMSG_LIBS) $(PROGS) saveFiles

copyFiles:
	-rm -f *.o *.so *.a $(PROGS)
	-cp -p ./.$(OSNAME)/$(PLATFORM)/$(CMSG_BIT_ARCH)/* .;

saveFiles:
	-cp -p *.o $(PROGS) $(CMSG_LIBS) ./.$(OSNAME)/$(PLATFORM)/$(CMSG_BIT_ARCH)/.;
	-rm -f *.o

install: all install-lib install-inc install-bin

install-lib: $(CMSG_LIBS)
	@echo "Installing CMSG C libraries in $(LIB_DIR)"
	@for i in $(CMSG_LIBS); do \
	   echo "  installing $$i"; \
	   cp $$i $(LIB_DIR)/$$i; \
	 done;

install-inc: $(HFILES)
	@echo "Installing C includes in $(INC_DIR)"
	@for i in $(HFILES); do \
	   echo "  installing $$i"; \
	   cp $$i $(INC_DIR)/$$i; \
	 done;

install-bin: $(PROGS)
	@echo "Installing C executables in $(BIN_DIR)"
	@for i in $(PROGS); do \
	   echo "  installing $$i"; \
	   cp $$i $(BIN_DIR)/$$i; \
	 done;

# libraries
$(LIB_STATIC): $(OBJS)
	$(AR) cr $@ $?
	$(RANLIB) $@

$(LIB_DYNAMIC): $(OBJS)
	$(SHLIB_LD) $(OBJS) -o $@

# file dependencies
$(OBJS)   : $(HFILES) $(SRC)

# Dummy stuff for example on how to create domain.
# In this directory, do "make -f Makefile.unix dummydomain".
LIB_DUMMY = libcmsgDUMMY.so

dummydomain: $(LIB_DUMMY) dummy

$(LIB_DUMMY): dummyDomain.o
	$(SHLIB_LD) dummyDomain.o -o $@
        
dummyDomain.o : $(HFILES) dummyDomain.c

dummy : dummy.c
	$(CC) -o dummy $(CFLAGS) dummy.c -L./ -L$(LIB_DIR) -lcmsgDUMMY -lcmsg -lcMsgRegex  $(LIBS)

# Clean up
clean: 
	-rm -f core *~ *.o *.so *.a *.class $(PROGS)
	-rm -f ./.$(OSNAME)/$(PLATFORM)/$(CMSG_BIT_ARCH)/*


# SUFFIX RULES
.c:
	$(CC) -o $* $(CFLAGS) $< -L./ -L$(LIB_DIR) -L/lib64/tls -L/usr/ucblib/amd64 -lcmsg -lcMsgRegex $(LIBS)
.c.o:
	$(CC) -c $(CFLAGS) $<
