#
#
LD  = ld
AR  = ar
RANLIB  = ranlib

TOP_DIR = ../..
INC_DIR = $(TOP_DIR)/inc
INSTALL = $(TOP_DIR)/install-sh -c

ifndef OSNAME
OSNAME := $(shell uname)
endif

# Linux
ifeq ($(OSNAME),Linux)
CC = gcc
LIB_DIR  = $(TOP_DIR)/lib/Linux
BIN_DIR  = $(TOP_DIR)/bin/Linux
AC_FLAGS =
#CFLAGS   = -O3 -fPIC -I. -I$(INC_DIR) $(AC_FLAGS)
CFLAGS   = -g -fPIC -I. -I$(INC_DIR) $(AC_FLAGS)
LIBS     = -lieee -lrt -lpthread -lm -lnsl -lresolv -ldl
SHLIB_LD = g++ -shared
endif

# Solaris
ifeq ($(OSNAME),SunOS)
CC = cc
LIB_DIR  = $(TOP_DIR)/lib/SunOS
BIN_DIR  = $(TOP_DIR)/bin/SunOS
AC_FLAGS = -D_REENTRANT -D_POSIX_PTHREAD_SEMANTICS
CFLAGS   = -mt -xO5 -KPIC -I. -I$(INC_DIR) $(AC_FLAGS)
CFLAGS   = -mt -xO5 -KPIC -I. -I$(INC_DIR) $(AC_FLAGS)
LIBS     = -lm -lposix4 -lpthread -lsocket -lnsl -lresolv -ldl
SHLIB_LD = ld -G
endif

LIBNAM      = libcmsg
LIB_STATIC  = $(LIBNAM).a
LIB_DYNAMIC = $(LIBNAM).so
CMSG_LIBS   = $(LIB_STATIC) $(LIB_DYNAMIC)

SRC =   rwlock.c \
	sunConcurrency.c \
	cMsgMatching.c \
	cMsgNetwork.c \
	cMsg.c \
	cMsgDomainUtil.c \
	cMsgDomainListenThread.c \
	cMsgDomain.c \
	rcDomain.c \
	fileDomain.c

OBJS =  rwlock.o \
	sunConcurrency.o \
	cMsgMatching.o \
	cMsgNetwork.o \
	cMsg.o \
	cMsgDomainUtil.o \
	cMsgDomainListenThread.o \
	cMsgDomain.o \
	rcDomain.o \
	fileDomain.o

HFILES = cMsgNetwork.h cMsgPrivate.h cMsgConstants.h cMsgBase.h cMsgDomain.h rwlock.h errors.h

PROGS  = producer consumer getConsumer getResponder shutdowner


all: $(CMSG_LIBS)  $(PROGS)

install: all install-lib install-inc install-bin

install-lib: $(CMSG_LIBS)
	@echo "Installing CMSG C libraries in $(LIB_DIR)"
	@for i in $(CMSG_LIBS); do \
	   echo "  installing $$i"; \
	   cp $$i $(LIB_DIR)/$$i; \
	 done;

install-inc: $(HFILES)
	@echo "Installing C includes in $(INC_DIR)"
	@for i in $(HFILES); do \
	   echo "  installing $$i"; \
	   cp $$i $(INC_DIR)/$$i; \
	 done;

install-bin: $(PROGS)
	@echo "Installing C executables in $(BIN_DIR)"
	@for i in $(PROGS); do \
	   echo "  installing $$i"; \
	   cp $$i $(BIN_DIR)/$$i; \
	 done;

# libraries
$(LIB_STATIC): $(OBJS)
	$(AR) cr $@ $?
	$(RANLIB) $@

$(LIB_DYNAMIC): $(OBJS)
	$(SHLIB_LD) $(OBJS) -o $@

# file dependencies
$(OBJS)   : $(HFILES) $(SRC)

# dummy stuff for example on how to create domain
LIB_DUMMY = libcmsgDUMMY.so

dummydomain: $(LIB_DUMMY) dummy

$(LIB_DUMMY): dummyDomain.o
	$(SHLIB_LD) dummyDomain.o -o $@
        
dummyDomain.o : $(HFILES) dummyDomain.c

dummy : dummy.c
	$(CC) -o dummy $(CFLAGS) dummy.c -L./ -L$(LIB_DIR) -lcmsgDUMMY -lcmsg -lcMsgRegex  $(LIBS)

# Clean up
clean: 
	rm -f core *~ *.o *.so *.a *.class $(PROGS)


# SUFFIX RULES
.c:
	$(CC) -o $* $(CFLAGS) $< -L./ -L$(LIB_DIR) -lcmsg -lcMsgRegex $(LIBS)
.c.o:
	$(CC) -c $(CFLAGS) $<
