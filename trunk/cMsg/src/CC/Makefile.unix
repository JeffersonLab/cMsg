#
# cMsg unix makefile for C++ code
#

LD  = ld
AR  = ar
RANLIB  = ranlib

C_DIR   = ../C

LIBNAMXX      = libcmsgxx
LIB_STATICXX  = $(LIBNAMXX).a
LIB_DYNAMICXX = $(LIBNAMXX).so
CAGATEWAY     = cMsgCAGateway

# for all POSIX systems _REENTRANT makes libc functions reentrant
AC_FLAGS = -D_REENTRANT -D_POSIX_PTHREAD_SEMANTICS

# Linux
ifeq ($(OSNAME),Linux)
CXX = g++
EPICS_DIR = /site/epics/R3.13.4/base/lib/Linux
EPICS_INC = -I/site/epics/R3.13.4/base/include -I/site/epics/R3.13.4/base/include/os/Linux 
EPICS_LIB = -lca -lCom -lcas -lgdd -lAs -lDb
AC_FLAGS  =
CFLAGS    = -O3 -fPIC -I. -I$(C_DIR) -I$(INC_DIR) $(AC_FLAGS) $(EPICS_INC) $(AC_FLAGS)
LIBS      = -L/usr/lib -lexpat -lieee -lrt -lpthread -lm -lnsl -lresolv -ldl
SHLIB_LD  = gcc -shared

# if 32 bit
ifneq ($(CMSG_BIT_ARCH), 64)
CFLAGS   = -m32 -O3 -fPIC -I. -I$(C_DIR) -I$(INC_DIR) $(AC_FLAGS) $(EPICS_INC) $(AC_FLAGS)
# next line does NOT work for regular 32 bit Linux
SHLIB_LD = ld -m elf_i386 -shared
SHLIB_LD = gcc -m32 -shared
endif

endif


# Solaris
ifeq ($(OSNAME),SunOS)

CXX  = CC
LIBS = -lm -lposix4 -lpthread -lsocket -lnsl -lresolv -ldl
CAGATEWAY =

# if 64 bit
ifeq ($(CMSG_BIT_ARCH), 64)

# no static linking on 64 bit solaris
LIB_STATICXX =

# if SPARC processor
ifeq ($(PLATFORM), sun4u)
CFLAGS   = -mt -xO5 -xarch=native64 -xcode=pic32 -I. -I$(C_DIR) -I$(INC_DIR) $(AC_FLAGS)
SHLIB_LD = ld -G -L /lib/64
# else if AMD processor
else
# put -fast flag to left of -xarch=amd64 !!!
CFLAGS   = -mt -xO5 -xarch=amd64 -KPIC -I. -I$(C_DIR) -I$(INC_DIR) $(AC_FLAGS)
# for some reason we must handle ucb lib explicitly
SHLIB_LD = ld -G -L /lib/64 -L /usr/ucblib/amd64
endif

# else if 32 bit
else
CFLAGS   = -mt -xO5 -KPIC -I. -I$(C_DIR) -I$(INC_DIR) $(AC_FLAGS)
SHLIB_LD = ld -G
endif

endif


CFLAGSXX  = $(CFLAGS) -Dcppversion

CMSG_LIBSXX = $(LIB_DYNAMICXX) $(LIB_STATICXX)

SRCXX =	cMsgWrapper.cc

OBJSXX = cMsgWrapper.o


HFILES = $(C_DIR)/rwlock.h \
	 $(C_DIR)/errors.h \
	 $(C_DIR)/cMsgNetwork.h \
	 $(C_DIR)/cMsgPrivate.h \
	 $(C_DIR)/cMsg.h \
	 $(C_DIR)/cMsgDomain.h
	 
HFILESXX = cMsg.hxx \
           epics_server.h

PROGSXX = cMsgCommand cMsgReceive cMsgMonitor $(CAGATEWAY)


all: copyFiles $(CMSG_LIBSXX) $(PROGSXX) saveFiles

copyFiles:
	-rm -f *.o *.so *.a $(PROGSXX)
	-cp -p ./.$(OSNAME)/$(PLATFORM)/$(CMSG_BIT_ARCH)/* .;

saveFiles:
	-cp -p *.o $(PROGSXX) $(CMSG_LIBSXX) ./.$(OSNAME)/$(PLATFORM)/$(CMSG_BIT_ARCH)/.;
	-rm -f *.o

install: all install-lib install-inc install-bin

install-lib: $(CMSG_LIBSXX)
	@echo "Installing CMSG C++ libraries in $(LIB_DIR)"
	@for i in $(CMSG_LIBSXX); do \
	   echo "  installing $$i"; \
	   cp $$i $(LIB_DIR)/$$i; \
	done;

install-inc: $(HFILESXX)
	@echo "Installing C++ includes in $(INC_DIR)"
	@for i in $(HFILESXX); do \
	   echo "  installing $$i"; \
	   cp $$i $(INC_DIR)/$$i; \
	done;

install-bin: $(PROGSXX)
	@echo "Installing C++ executables in $(BIN_DIR)"
	@for i in $(PROGSXX); do \
	   echo "  installing $$i"; \
	   cp $$i $(BIN_DIR)/$$i; \
	done;

# libraries
$(LIB_STATICXX): $(SRCXX)
	$(CXX) -c $(CFLAGSXX) $(SRCXX)
	$(AR) cr $@ $(OBJSXX)
	$(RANLIB) $@

$(LIB_DYNAMICXX): $(OBJSXX)
	$(SHLIB_LD) $(OBJSXX) -o $@


# file dependencies
$(OBJSXX) : $(HFILES) $(HFILESXX) $(SRCXX)

clean: 
	-rm -f core *~ *.o *.so *.a *.class $(PROGSXX)
	-rm -f ./.$(OSNAME)/$(PLATFORM)/$(CMSG_BIT_ARCH)/*


cMsgCAGateway: cMsgCAGateway.cc epics_server.cc
	$(CXX) -o cMsgCAGateway $(CFLAGSXX) cMsgCAGateway.cc epics_server.cc -L./ -L$(LIB_DIR) -lcmsgxx -lcmsg -lcMsgRegex -L$(EPICS_DIR) $(EPICS_LIB) $(LIBS)
        


# SUFFIX RULES
.c:
	$(CXX) -o $* $(CFLAGSXX) $< -L./ -L$(LIB_DIR) -lcmsgxx -lcmsg -lcMsgRegex $(LIBS)
.cc:
	$(CXX) -o $* $(CFLAGSXX) $< -L./ -L$(LIB_DIR) -lcmsgxx -lcmsg -lcMsgRegex $(LIBS)
.c.o:
	$(CXX) -c $(CFLAGSXX) $<
.cc.o:
	$(CXX) -c $(CFLAGSXX) $<
