# scons build file for cmsg
    
Import('env', 'libDir', 'incDir', 'archIncDir', 'debugSuffix')
import os
from os import sep

headerList = ['cMsg.h',
              'cMsgConstants.h',
              'cMsgDomain.h',
              'cMsgNetwork.h',
              'cMsgPrivate.h']

linkList = [archIncDir + sep + 'cMsg.h',
            archIncDir + sep + 'cMsgConstants.h',
            archIncDir + sep + 'cMsgDomain.h',
            archIncDir + sep + 'cMsgNetwork.h',
            archIncDir + sep + 'cMsgPrivate.h']


fileList = ['cMsg.c',
           'cMsgCompoundPayload.c',
           'cMsgDomain.c',
           'cMsgDomainListenThread.c',
           'cMsgDomainUtil.c',
           'cMsgMatching.c',
           'cMsgNetwork.c',
           'encode.c',
           'fileDomain.c',
           'dummyDomain.c',
           'hash.c',
           'rcDomain.c',
           'rcDomainListenThread.c',
           'rwlock.c',
           'sunConcurrency.c']

docList = ['cMsg.h',
           'cMsgConstants.h',
           'cMsg.c',
           'cMsgCompoundPayload.c']

env.AppendUnique(CPPPATH = ['.', '#src/regexp'])
cmsgLib = env.SharedLibrary(target = 'cmsg'+debugSuffix, source = fileList)
env.Alias("install", env.Install(target = incDir, source = headerList))
env.Alias("install", env.Install(target = libDir, source = cmsgLib))

# create symbolic links to installed header files
env.Alias("install", env.CreateSymbolicLinks(target = linkList,
                                             source = env.Install(target = incDir, source = headerList)))

# generate documentation
env.Alias('doc', env.DocGenC(target = ['#/doc/doxygen/C/html/index.html'],
                             source = docList ))
