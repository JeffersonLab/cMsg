# scons build file for cmsg
Import('env', 'binInstallDir', 'archDir', 'execLibs', 'debugSuffix')
import re

 # lists of all C and C++ files
all_cfileList  = Glob('*.c',  strings=True)
all_ccfileList = Glob('*.cc', strings=True)

# All vxworks files start by convention with 'vx' (ignoring case), so filter these out.
cfileList = []
pattern = re.compile('vx', re.IGNORECASE)
for fileName in all_cfileList:
    if pattern.match(fileName) is None:
        cfileList.append(fileName)
        
ccfileList = []
for fileName in all_ccfileList:
    if pattern.match(fileName) is None:
        ccfileList.append(fileName)

# For each C file, create executable of the same name,
# and install that executable if "scons examples" is command
for fileName in cfileList:
    compiledFile = env.Program(source  = fileName,
                               LIBS    = ['cmsgRegex'+debugSuffix, 'cmsg'+debugSuffix] + execLibs,
                               LIBPATH = ['#src/regexp/'+archDir, '#src/libsrc/'+archDir],
                               CPPPATH = ['.', '#src/regexp', '#src/libsrc'])
    env.Alias('examples', env.Install(target = binInstallDir, source = compiledFile))

# If we store all compiled programs in a list and then
# install the list itself, for some unknown reason the
# whole variant library is copied into the install directory.
# So we do things individual file by individual file.

# compile and install
for fileName in ccfileList:
    compiledFile = env.Program(source  = fileName,
                               LIBS    = ['cmsgRegex'+debugSuffix,
                                          'cmsg'+debugSuffix,
                                          'cmsgxx'+debugSuffix] + execLibs,
                               LIBPATH = ['#src/regexp/'+archDir,
                                          '#src/libsrc/'+archDir,
                                          '#src/libsrc++/'+archDir],
                               CPPPATH = ['.', '#src/regexp', '#src/libsrc', '#src/libsrc++'])
    env.Alias('examples', env.Install(target = binInstallDir, source = compiledFile))
