# scons build file for cmsg
Import('env', 'binDir', 'archDir', 'execLibs')

# All vxworks examples start by convention with 'vx', don't compile these
vx_cfileList  = Glob('vx*.c')  + Glob('VX*.c')  + Glob('vX*.c')  + Glob('Vx*.c')
vx_ccfileList = Glob('vx*.cc') + Glob('VX*.cc') + Glob('vX*.cc') + Glob('Vx*.cc')

# All C files
cfileList = Glob('*.c')

# Remove any vxworks files from C file list
for vxname in vx_cfileList:
    for fname in cfileList:
       if vxname == fname:
            cfileList.remove(vxname)
            break

# For each C file, create executable of the same name,
# and install that executable if "scons examples" is command
for fileName in cfileList:
    compiledFile = env.Program(source  = fileName,
                               LIBS    = ['cmsgRegex', 'cmsg'] + execLibs,
                               LIBPATH = ['#src/regexp/'+archDir, '#src/libsrc/'+archDir],
                               CPPPATH = ['.', '#src/regexp', '#src/libsrc'])
    env.Alias('examples', env.Install(target = binDir, source = compiledFile))

# If we store all compiled programs in a list and then
# install the list itself, for some unknown reason the
# whole variant library is copied into the install directory.
# So we do things individual file by individual file.

# Now do C++ files
ccfileList = Glob('*.cc')

# Remove any vxworks files from C++ file list
for vxname in vx_ccfileList:
    for fname in ccfileList:
        if vxname == fname:
            ccfileList.remove(vxname)
            break

# compile and install
for fileName in ccfileList:
    compiledFile = env.Program(source  = fileName,
                               LIBS    = ['cmsgRegex', 'cmsg', 'cmsgxx'] + execLibs,
                               LIBPATH = ['#src/regexp/'+archDir,
                                          '#src/libsrc/'+archDir,
                                          '#src/libsrc++/'+archDir],
                               CPPPATH = ['.', '#src/regexp', '#src/libsrc', '#src/libsrc++'])
    env.Alias('examples', env.Install(target = binDir, source = compiledFile))
