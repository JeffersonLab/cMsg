Changes from the previous version:

Version 3.5
    - Bug fixes:
        -- problem with payload of double type
        -- put rc domain multicast packets over all network interfaces

    - add user xml fragment to monitoring data

    - update jar files for EPICS channel access and ET

    - add scons option to remove documentation

    - add ant options to:
        -- remove documentation
        -- uninstall jar files

    - both "scons install" and "ant install" places files into $CODA/...
      where CODA is an environmental variable
  
    - "scons install" builds all executable files. FIles in src/test and src/examples
      are placed in bin/test, and bin/examples.


Version 3.5.1
    - add emu domain in Java for communication between Rocs and EBs
    - add syncSend to rc server domain to act as a ping of client

Version 3.6
    - add emu domain in C language for communication between Rocs and EBs
    - fix flags for Mac OSX compilation 9/22/2014

Version 4.0
    - fix bug in java rc client listening thread that does not properly
              handle multiple attempts to connect.
    - fix bug in java rc client connect that leaves thread running even when it fails.
    - fix bug in C rc client that does not reconnect back to rc server.
    - fix bug in C, cmsg domain client, freeing memory already freed
    - fix bug in rc server listening thread which unregisters the udp socket from select

    - cMsg, rc, and emu domains implement optional use of a preferred subnet

    - change java API getString() method. It is now getInfo() and takes a String arg.

    - add getServerHost and getServerPort to API & implement in rc, cMsg, and emu domains

	- change the cMsg domain communication protocol allowing the handling
      of multiple server IP addresses

	- change the C rc client so that the cMsgMonitor() call is now implemented.
	  It returns a msg in which cMsgGetSenderHost will return the rc multicast server's host.

	- change the rc multicast domain communication protocol so that the rc client monitor()
	  call in both C and Java returns a cMsg message with a String array payload item
	  named "IpAddresses" which contains all the server's dot-decimal IP addresses.

    - if a client uses a password, but the cMsg server has none, cMsg now rejects the connection.
      In previous versions it allowed the connection. This change was made so that
      a cMsg server's password can act as a name. Clients can now multicast while specifying
      that password and will get a response from that server only (if it is unique).

    - specify the local port of a udp socket for multicasting to avoid overlap with cMsgServerFinder
      and thereby received unwanted udp packets

Version 5.0
    - the emu domain sender now exactly identifies the receiving server to avoid mis-communication.
      Do this by sending a multicast packet with the destination CODA component name to act
      as a filter on the receiving end or like the password of the cMsg domain.
    - fix bug in parsing emu domain UDL
    - added flush() to emu domain so prestart event can be flushed through CODA's emu
    - remove unused rc domain code
    - fix Java bug in which an "ip=local-broadcast-addr" in UDL will cause an attempt for
      rc server to connect to rc client on that broadcast address.
    - fix bug in parsing cMsg subdomain UDLs in which namespace can be interpreted as a subdomain
      name if no cmsg subdomain name given in UDL (both C and Java)

    C code only:
      - make common network code consistant with et library's
      - fix MacOSX compile flags
      - take out support for vxworks & solaris
      - clean up some of the code
      - fix bug in cMsgCommonNetwork.h so it could conflict with etCommonNetwork.h
      - fix bug in cMsg.c in which cMsgSetByteArrayNoCopy & cMsgSetByteArray may free memory improperly
      - fix bug in cMsgDomainUtil.c in cMsgGetInfoFree in which cond var & mutex were
        not being freed -> memory leak
      - bug in decoding cMsg message sent over network that interprets unknown int-type array payload item data
        as 64-bit int array - probably had no practical effect
      - fix major bug parsing UDL in cMsg domain - no tag-value pairs at end were parsed
      - fix rc bug in client in which last 4 bytes of buffer to rc multicast server is an incrementing int
        (should not be) and writes over the last broadcast address sent in list of IP network
        interface & corresponding broadcast addresses
      - rc UDL now includes "ip=<addr>" portion like Java.
      - fix potential seg fault in freeing memory in connect() function (race condition)

Version 5.1
    Java
    - add cMsgMessage.setByteArray(ByteBuffer buf) method and make setByteArray(byte[] b) more efficient
    - name threads for clarity in profiling tools

    C & Java
    - add counter to rc client's multicast packets so rc multicast server can tell
      when client has died and a new one with the same name started up


 Version 5.2    (Java version 8 now required)
    Java
    - switch using the Base64 implementation from an external source to the one
      which is now (Java V8) built into the jvm.
    - if message is given a byte array of 0 length, the array is set to null
    - fix indentation of binary XML output of cMsg message
    - fix bug in parsing XML to cMsgMessage, in which if no main byte array exists
      in XML message it will assign the first binary data in the payload to the main
      byte array
