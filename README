cMsg Software Package

You must install Java version 1.5 or higher if you plan to run
the cMsg server. If you only plan to run C/C++ clients (i.e. if
you will use someone else's cMsg server) you can skip the Java
installation. If you only plan to use Java domains and clients
you can skip the C/C++ installation.

1) Getting cMsg

The cMsg package, including documentation, can be found in the
Downloads section on the JLab Data Acquisition Group CODA wiki
at http://coda.jlab.org. To install cMsg, download the cMsg-3.x.tar.gz
file (or whatever version happens to be current) and untar it.
This will give you a full cMsg distribution with the top level
directory being cMsg-3.x.  The documentation, in the doc subdirectory,
contains User's and Developer's Guides (word, pdf), javadoc
for the Java API (html), and doxygen directories containing
C/C++ API docs (html). The javadoc and doxygen documentation
needs to be generated by programs of the same name. Javadoc
comes with any java distribution and doxygen is available at
http://www.doxygen.org.

At this point there are 2 options for building the C/C++ code
(temporarily while the CODA group evaluates each of them and
settles permanently on one or the other). One build system, BMS,
is based on make, while the other uses scons and python. Note that
currently only Linux, Solaris, and Darwin (Mac OSX) operating
systems are supported. The libraries and executables are placed
into the $INSTALL_DIR/<arch>/lib and bin subdirectories
(eg. ...Linux-x86_64/lib).  Be sure to change your LD_LIBRARY_PATH
environmental variable to include the correct lib directory.

2) Compiling C/C++ code

a) Using SCons

From the SCons website: "SCons is an Open Source software
construction tool -- that is, a next-generation build tool.
Think of SCons as an improved, cross-platform substitute for
the classic Make utility with integrated functionality similar
to autoconf/automake and compiler caches such as ccache. In short,
SCons is an easier, more reliable and faster way to build software."
SCons is written in python, thus to use this build system with cMsg,
both python and SCons packages need previous installation. If your
system does not have one or the other, go to the http://www.python.org/
and http://www.scons.org/ websites for downloading.

The SCons files are already included as part of the cMsg distribution.
To compile, the user needs merely to run "scons" in the top level cMsg
directory. To compile and install libraries and header files, first
define either CODA_HOME or INSTALL_DIR and then (equivalent of
"make install") run "scons install".

The following is a table of SCons compilation options:

scons -h          print out help
scons -c          remove all generated files
scons install     make C and C++ library code and general-purpose binaries;
                  place libraries & binaries in architecture-specific
                  directories and headers in an include directory
scons examples    make C and C++ executable example code;
                  place executables in architecture-specific directory
scons tar         create a tar file (cMsg-3.x.tar.gz) of the cMsg top level
                  directory and put in ./tar directory
scons doc         generate html documentation from javadoc and doxygen
                  comments in the source code and put in ./doc directory
scons -c install  remove all installed headers, libraries, and executables
                  for C, C++ and all generated files
scons --dbg       compile with debug flag
scons --32bits    compile 32bit libraries & executables on 64bit system
scons --vx        cross compile for vxworks
scons --prefix=<dir> use base directory <dir> when doing install

b) Using make

The necessary makefiles for building cMsg are contained in an external
package called BMS. BMS can be downloaded from the same ftp directory
as cMsg. To get a complete look at this makefile system and how to use
it to compile cMsg, read the BMS documentation. The following is a quick
look at how to compile cMsg just to get you going but skips over many details.

After BMS.tar.gz has been downloaded and untarred, set the environmental
variable BMS_HOME to its installation directory and the variable CODA_HOME
or INSTALL_DIR to the directory which will hold the compiled cMsg libraries,
executables, headers and other files. Change directories to cMsg-3.x and make
everything by typing "make install".  Just doing a "make" at this point runs
into trouble since the makefiles look into the install directory for the
libraries when making the executables (yes, I know it's inconvenient, but
if you want convenience use SCons to make cMsg). Note that currently only
Linux, Solaris, and Darwin (Mac OSX) operating systems are supported for
the making of all the C and C++ code. 

# download BMS.tar.gz into myDir
# download cMsg-3.x.tar.gz into myDir
$ cd myDir
$ tar -fxz BMS.tar.gz
$ setenv BMS_HOME myDir/BMS
$ mkdir cmsg_install
$ setenv INSTALL_DIR myDir/cmsg_install 
$ tar -fxz cMsg-3.x.tar.gz 
$ cd cMsg-3.x
$ make install

This will make everything except java and docs - directories, C, and C++.
There are other options for making cMsg. The following is a table of
the main makefile possibilities:

The following is a table of make compilation options:

make               make all C/C++code including creating necessary directories
                   but does not create documentation
make help          print out help
make env           print out environmental variables
make install       make C/C++ code and place libraries and executables
                   in architecture-specific lib and bin directories and
                   headers in include directory
make uninstall     remove all installed headers, libraries,
                   and executables for C/C++
make relink        delete libraries and executables, and relink object files
make tar           create a tar file (cMsg-3.x.tar.gz) of the cMsg top level
                   directory and put in ./tar directory
make clean         clean C/C++ code in ./src subdirectories by removing
                   libraries, executables, object and dependency files
make distClean     make clean and remove hidden architecture-specific directories
make execClean     delete all libraries and executables
make doc           generate documentation from code - javadoc and doxygen
make mkdirs        create the directories needed to store docs, include files, and
                   architecture-specific libraries, executables, & object files
make java          make java code and put jar file in ./build/lib directory
make javaClean     remove class files from ./build/classes directory
make javaDistClean remove all java generated files including class, doc,
                   and jar files


Setting the variable CODA_USE64BITS to anything (value not used) will
cause flags to be set that will compile the code to be 64 bits. Note
that trying to compile for 64 bits on a 32 bit machine causes an error
on Solaris while Linux just creates 32 bit code. Vxworks ignores
CODA_USE64BITS.

For debugging, simply define the DEBUG environmental variable to anything
(its value is ignored). This automatically gets rid of the optimization
flag and adds the –g flag to the compilers. The debug versions of binaries
are given suffixes of _d to distinguish them from their non-debug counterparts
and so that they may share directories with them. For example, a library
name libFOO.a will have a debug version named libFOO_d.a, and an executable
named BAR will have a debug version named BAR_d.

3) Compiling Java

One can obtain the cMsg-3.x.jar file from the general cMsg distribution
as outlined above or just download the jar file by itself.  In either case,
put the jar file into your classpath and run your java application.
The current version needs a Java 1.5 or later JVM.  

If you wish to recompile the java part of cMsg, ant must be installed
on your system (http://ant.apache.org). First extract the package files
from the general cMsg tar file:
  
# download cMsg-3.x.tar.gz into myDir
$ cd myDir
$ tar -fxz cMsg-3.x.tar.gz 
$ cd cMsg-3.x

There are 2 ways to go from here. You can use make which calls
ant underneath:

$ make java

or you can use ant directly simply by calling “ant” in the top
level directory. To get a list of option with ant, type:

The following is a table of ant options:

ant [compile]  compile all java source code
ant help       print out usage
ant env        print out value of build file variables
ant clean      delete all class files
ant cleanall   remove build and javadoc directories
ant jar        compile and create jar file
ant install    create jar file and install into 'prefix'
               if given on command line by -Dprefix=dir',
               else install into INSTALL_DIR or CODA_HOME
               if defined (in that order)
ant all        do clean, compile, then create jar file
ant javadoc    create javadoc documentation
ant prepare    create necessary directories
ant developdoc create javadoc documentation for developer

Included in the ./jar subdirectory are all auxiliary jar files used
by the built-in domains and subdomains. Thus to use the Channel Access
or the SmartSockets (sub)domains the user must include the necessary
jar files in the classpath.  Check the individual package web sites
for more information.

4) Using C/C++

The libraries and executables are place into the $(ARCH)/lib and
bin subdirectories (i.e. Linux-x86_64/bin and Linux-x86_64/lib).
Be sure to change your LD_LIBRARY_PATH environmental variable to
include the correct lib directory.

5) Building Documentation

Some of the cmsg documentation is in the source code itself and
must be generated and placed into its own directory. The java code
is documented with, of course, javadoc and the C/C++ code is
documented with doxygen comments (identical to javadoc comments).
To generate the docs with the BMS system, type “make doc” from the
top level directory. To generate the docs with the scons system,
type “scons doc” from the top level directory. The javadoc is placed
in the doc/javadoc directory, the doxygen docs for C code are placed
in the doc/doxygen/C/html directory, and the doxygen docs for C++ code
are placed in the doc/doxygen/CC/html directory. To view the html
documentation, just point your browser to the index.html file in
each of those directories.

6) Problems

Elliott Wolin - wolin@jlab.org, or
Carl Timmer   - timmer@jlab.org


7) Copyright

For any issues regarding use and copyright, read the NOTICE file.

